# -*- coding: utf-8 -*-
"""
Django settings for arch project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path

import pymongo
from corsheaders.defaults import default_headers
from langchain_aws import BedrockEmbeddings
from langchain_mongodb.vectorstores import MongoDBAtlasVectorSearch
from pymongo.server_api import ServerApi

from .configuration import (
    DatabaseConfig, ApplicationSettings, AdminSettings, MongoConfig)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

application_settings = ApplicationSettings()
admin_settings = AdminSettings()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '1hktyuhvjhkdjyyrtyui--n!mkr3popopuf4*pje2popoww567841cdhvfq=-4e6g3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
# ALLOWED_HOSTS = [
#     h.strip() for h in os.getenv('DJANGO_ALLOWED_HOSTS', '').split(',')]

# SMTP


# Application definition


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',

    'rest_framework',
    'rest_framework.authtoken',

    'django_filters',
    'corsheaders',
    'questionnaires_compiler.apps.QuestionnairesCompilerConfig',


]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # corsheaders
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'django_core.urls'

WSGI_ON = application_settings.WSGI_ON
if WSGI_ON:
    WSGI_APPLICATION = 'questionnaires_compiler.django_core.wsgi.application'



TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': False,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

db_config = DatabaseConfig()
DATABASES = {
    'default': {
        'ENGINE': db_config.ENGINE.value,
        'NAME': db_config.DATABASE,
        'USER': db_config.USER,
        'PASSWORD': db_config.PASSWORD,
        'HOST': db_config.HOST,
        'PORT': db_config.PORT,
    }
}


# MongoDB Connection and Langchain
mongo_config = MongoConfig()


# mongo_connection_string = (
#     f'mongodb://'
#     f'{mongo_config.USER}:{mongo_config.PASSWORD}'
#     f'@{mongo_config.HOST}:{mongo_config.PORT}'
# )
mongo_connection_string = os.environ["MONGODB_ATLAS_CLUSTER_URI"]
server_api = ServerApi('1')

MONGO_CLIENT = pymongo.MongoClient(
    mongo_connection_string,
    server_api=server_api
)
MONGO_DB = MONGO_CLIENT[mongo_config.DATABASE]
MONGODB_COLLECTION = MONGO_DB['questions_2.7k']
# MONGODB_COLLECTION = MONGO_DB['collection2']
MONGODB_COLLECTION_DOCUMENTS = MONGO_DB['documents']
MONGODB_ATLAS_VECTOR_SEARCH_INDEX_NAME = "vector_index"

embeddings = BedrockEmbeddings(model_id="cohere.embed-multilingual-v3")

vector_store = MongoDBAtlasVectorSearch(
    collection=MONGODB_COLLECTION,
    embedding=embeddings,
    index_name=MONGODB_ATLAS_VECTOR_SEARCH_INDEX_NAME,
    embedding_key='question_embedding',
    text_key='question'
)

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Logging
# https://docs.djangoproject.com/en/3.0/topics/logging/
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
}


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_TZ = True

USE_I18N = True

# https://docs.djangoproject.com/en/4.1/ref/settings/#date-format
USE_L10N = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# corsheaders
CORS_URLS_REGEX = r"^/api/.*$"
CORS_ALLOW_HEADERS = list(default_headers) + [
    # "x-correlation-id",
]
# CORS_ALLOW_CREDENTIALS = True

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': [

    ],

    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],

    'DEFAULT_AUTHENTICATION_CLASSES': [

    ],

    'DEFAULT_PERMISSION_CLASSES': [

    ],
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'EXCEPTION_HANDLER':
        'questionnaires_compiler.errors.custom_serializer_exception_handler',
}



# Logging
# https://docs.djangoproject.com/en/3.0/topics/logging/
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'default'
        }
    },
    'formatters': {
        'default': {
            'format': '[%(levelname)s] %(asctime)s %(name)s - %(message)s'
        }

        },
    'root': {
        'handlers': ['console'],
        'level': os.getenv('APP_LOG_LEVEL', 'INFO'),
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'questionnaires_compiler': {
            'handlers': ['console'],
            'level': os.getenv('APP_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },

    }
}


# CELERY STUFF
# RABBIT_USER = os.getenv('RABBITMQ_USER')
# RABBIT_PASSWORD = os.getenv('RABBITMQ_PASSWORD')
# RABBIT_HOSTNAME = os.getenv('RABBITMQ_HOST', 'rabbitmq')
# RABBIT_VHOST = os.getenv('RABBITMQ_VHOST', '')
# BROKER_URL = f"amqp://{RABBIT_USER}:{RABBIT_PASSWORD}@{RABBIT_HOSTNAME}/{RABBIT_VHOST}/"
#
# CELERY_BROKER_URL = BROKER_URL
# CELERY_RESULT_BACKEND = 'rpc://'
# CELERY_RESULT_PERSISTENT = False
# CELERY_ACCEPT_CONTENT = ['application/json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = TIME_ZONE
# CELERYD_MAX_TASKS_PER_CHILD = 100
# HEALTHCHECK_CELERY_TIMEOUT = 3
